AddCSLuaFile()

ENT.Base = "gballoon_tower_base"
ENT.Type = "anim"
ENT.PrintName = "Hoverball Factory"
ENT.Category = "RotgB: Towers"
ENT.Author = "Piengineer"
ENT.Contact = "http://steamcommunity.com/id/Piengineer12/"
ENT.Purpose = "This tower very slowly creates hoverballs that can be sold / removed for $20 each, but only while a gBalloon Spawner is active. You can touch hoverballs to remove them."
ENT.Instructions = ""
ENT.Spawnable = false
ENT.AdminOnly = false
ENT.RenderGroup = RENDERGROUP_BOTH
ENT.Model = Model("models/maxofs2d/hover_plate.mdl")
ENT.FireRate = 10
ENT.Cost = 750
ENT.AbilityCooldown = 60
ENT.LOSOffset = Vector(0,0,5)
ENT.AttackDamage = 0
ENT.DetectionRadius = 0
ENT.InfiniteRange = true
ENT.SeeCamo = true
ENT.FireWhenNoEnemies = true
ENT.rotgb_HoverballWorth = 50
ENT.rotgb_HoverballLife = 20
ENT.rotgb_HoverballDelay = 0.15
ENT.rotgb_BankFactor = 0
ENT.rotgb_BankMax = 100
ENT.rotgb_HoverballPostCash = 0
ENT.rotgb_Buff = 0
ENT.rotgb_HoverballSkin = 0
ENT.rotgb_HoverballSize = 1
ENT.rotgb_HoverballModel = "models/maxofs2d/hover_classic.mdl"
ENT.UpgradeReference = {
	{
		Names = {"Fast Generation", "Advanced Hoverballs", "Faster Generation", "Elite Hoverballs", "Ultimate Hoverballs", "The Big Bill Balls", "Dark Matter Hoverballs"},
		Descs = {
			"Slightly increases hoverball generation speed.",
			"Slightly increases hoverball sell price.",
			"Considerably increases hoverball generation speed.",
			"Slightly decreases hoverball generation speed, but colossally increases hoverball sell price.",
			"Considerably decreases hoverball generation speed to further increase hoverball price.",
			"Yes.",
			"Each hoverball takes a few rounds to be created. This tower creates Dark Matter Hoverballs that sell for $1.5 million each, with a 10% chance for 10 times the amount."
		},
		Prices = {450,700,2000,7500,45000,300000,5e6},
		Funcs = {
			function(self)
				self.rotgb_HoverballDelay = self.rotgb_HoverballDelay / 1.5
			end,
			function(self)
				self.rotgb_HoverballWorth = self.rotgb_HoverballWorth * 1.5
				self.rotgb_HoverballModel = "models/dav0r/hoverball.mdl"
			end,
			function(self)
				self.rotgb_HoverballDelay = self.rotgb_HoverballDelay / 2
			end,
			function(self)
				self.rotgb_HoverballDelay = self.rotgb_HoverballDelay * 1.5
				self.rotgb_HoverballWorth = self.rotgb_HoverballWorth * 5
				self.rotgb_HoverballModel = "models/maxofs2d/hover_rings.mdl"
			end,
			function(self)
				self.rotgb_HoverballDelay = self.rotgb_HoverballDelay * 2
				self.rotgb_HoverballWorth = self.rotgb_HoverballWorth * 10
				self.rotgb_HoverballModel = "models/maxofs2d/hover_basic.mdl"
			end,
			function(self)
				self.rotgb_HoverballDelay = self.rotgb_HoverballDelay * 3
				self.rotgb_HoverballWorth = self.rotgb_HoverballWorth * 20
				self.rotgb_HoverballSkin = 3
				self.rotgb_HoverballSize = 3
			end,
			function(self)
				self.rotgb_HoverballDelay = self.rotgb_HoverballDelay * 5
				self.rotgb_HoverballWorth = self.rotgb_HoverballWorth * 50
				self.rotgb_HoverballSkin = 0
				self.rotgb_HoverballModel = "models/maxofs2d/hover_rings.mdl"
				self.rotgb_10Chance = true
			end
		}
	},
	{
		Names = {"Long Lasting Hoverballs", "Auto-Sell", "Compound Interest", "Garry's Bank", "Grand Metropolis", "Prop Country", "INFINITE GROWTH!"},
		Descs = {
			"Hoverballs last for 200% longer.",
			"Hoverballs are now automatically removed and all health generated by this tower is doubled.",
			"For each player, this tower generates additional cash equal to 0.1% of their current cash per second, up to $100 per second. Only works while gBalloons are present.",
			"This tower now generates 0.2% interest, up to $500 per second.",
			"This tower now generates interest from current cash AND placed towers, up to $10,000 per second.",
			"This tower now generates interest up to $250,000 per second!",
			"This tower no longer has a maximum interest rate! Once every 60 seconds, shooting at this tower doubles everyone's current cash!"
		},
		Prices = {450,1300,4000,20000,400000,10e6,1e9},
		Funcs = {
			function(self)
				self.rotgb_HoverballLife = self.rotgb_HoverballLife * 3
			end,
			function(self)
				self.rotgb_AutoHoverball = true
			end,
			function(self)
				self.rotgb_BankFactor = 0.001
			end,
			function(self)
				self.rotgb_BankFactor = 0.002
				self.rotgb_BankMax = 500
			end,
			function(self)
				self.rotgb_BankMax = 10000
				self.rotgb_BankBonus = true
			end,
			function(self)
				self.rotgb_BankMax = 250000
			end,
			function(self)
				self.rotgb_BankMax = math.huge
				self.HasAbility = true
			end
		}
	},
	{
		Names = {"A Little Extra", "Just Pocket It", "Fuzzy Income", "King of Hearts", "Microbot Research", "Nanomachines"},
		Descs = {
			"At the start of each round, gain 15% of a round's worth of hoverball cash.",
			"This tower no longer generates income. At the start of each round, gain all of the hoverball income and 60 seconds of non-hoverball income that would have been generated.",
			"Each round, hoverball cash production is altered to a random number between 0% and 400%.",
			"At the end of each round, all gBalloon Targets gain 20 health.",
			"At the end of each round, the income of all Hoverball Factory towers are multiplied by 1.2!",
			"At the end of each round, all gBalloon Targets' health are multiplied by 1.2!"
		},
		Prices = {450,1000,2000,5000,20000,75000},
		Funcs = {
			function(self)
				self.rotgb_HoverballPostCash = 0.15
			end,
			function(self)
				self.rotgb_NoHoverball = true
				self.rotgb_HoverballPostCash = 1
			end,
			function(self)
				self.rotgb_Trading = true
			end,
			function(self)
				self.rotgb_Buff = 1
			end,
			function(self)
				self.rotgb_Buff = 2
			end,
			function(self)
				self.rotgb_Buff = 3
			end
		}
	}
}
ENT.UpgradeLimits = {8,2,0}

function ENT:FireFunction(gBalloons)
	local cmul = GetConVar("rotgb_cash_mul"):GetFloat()
	if IsValid(self.rotgb_Spawner) then
		if self:DetermineCharge(self.rotgb_Spawner) - self.rotgb_LastCharge >= self.rotgb_HoverballDelay and self.rotgb_HoverballWorth > 0 and not self.rotgb_NoHoverball then
			self.rotgb_LastCharge = self.rotgb_LastCharge + self.rotgb_HoverballDelay
			local should10x = self.rotgb_10Chance and math.random() < 0.1
			local hoverballAmount = self.rotgb_HoverballWorth * (should10x and 10 or 1)
			if self.rotgb_AutoHoverball then
				self:AddCash(hoverballAmount*cmul, self:GetTowerOwner())
				local effdata = EffectData()
				effdata:SetEntity(self)
				util.Effect("entity_remove",effdata,true,true)
			else
				local hoverball = ents.Create("gballoon_tower_16_hoverball")
				hoverball:SetPos(self:LocalToWorld(self.LOSOffset*2))
				hoverball:SetModel(self.rotgb_HoverballModel)
				if self.rotgb_10Chance then
					hoverball:SetMaterial(should10x and "models/props_combine/portalball001_sheet" or "models/effects/comball_tape")
				end
				hoverball:SetSkin(self.rotgb_HoverballSkin)
				hoverball:Spawn()
				hoverball:SetModelScale(self.rotgb_HoverballSize)
				hoverball:Activate()
				hoverball:AddEffects(EF_ITEM_BLINK)
				local physobj = hoverball:GetPhysicsObject()
				if IsValid(physobj) then
					local randnum = math.random()*math.pi*2
					local dirvec = Vector(math.sin(randnum), math.cos(randnum), 0)
					dirvec:Mul(10)
					physobj:Wake()
					physobj:SetVelocity(dirvec)
				end
				hoverball.rotgb_Value = hoverballAmount
				hoverball:SetTrigger(true)
				hoverball:UseTriggerBounds(true,64)
				function hoverball:StartTouch(ent)
					if (IsValid(ent) and ent:IsPlayer()) then
						hoverball:SetTrigger(false)
						hoverball:SetNotSolid(true)
						hoverball:SetMoveType(MOVETYPE_NONE)
						hoverball:SetNoDraw(true)
						local effdata = EffectData()
						effdata:SetEntity(hoverball)
						util.Effect("entity_remove",effdata,true,true)
						return SafeRemoveEntityDelayed(hoverball,1)
					end
				end
				hoverball:CallOnRemove("RotgB.Hoverball",function()
					if IsValid(self) then
						self:AddCash(hoverball.rotgb_Value*cmul, self:GetTowerOwner())
					else
						ROTGB_AddCash(hoverball.rotgb_Value*cmul*GetConVar("rotgb_tower_income_mul"):GetFloat())
					end
				end)
				timer.Simple(self.rotgb_HoverballLife,function()
					if IsValid(hoverball) then
						hoverball.rotgb_Value = 0
						hoverball:Remove()
					end
				end)
			end
		end
	else
		self:SetName("ROTGB_TOWER_16_"..self:GetCreationID())
		self.rotgb_Spawner = ents.FindByClass("gballoon_spawner")[1]
		if self.rotgb_Spawner then
			self.rotgb_LastCharge = self:DetermineCharge(self.rotgb_Spawner)
			self.rotgb_BankCharge = self:DetermineCharge(self.rotgb_Spawner)
			self.rotgb_Spawner:Fire("AddOutput","OnWaveStart "..self:GetName()..":GainEndCash::0:-1")
		end
	end
	if self.rotgb_BankFactor > 0 and not self.rotgb_NoHoverball and IsValid(gBalloons[1]) then
		self.rotgb_BankCharge = (self.rotgb_BankCharge or 0) + 1
		if self.rotgb_BankCharge >= 10 then 
			self.rotgb_BankCharge = 0
			self:PerformBank()
		end
	end
end

function ENT:DetermineCharge(spawner)
	local charge = spawner:GetWave()-1
	local percent = 1-math.Clamp((spawner:GetNextWaveTime()-CurTime())/spawner:GetWaveDuration(charge)*spawner:GetSpeedMul(),0,1)
	return charge+percent
end

function ENT:PerformBank(lagless)
	local cmul = GetConVar("rotgb_cash_mul"):GetFloat()
	self.rotgb_CashToAdd = lagless and self.rotgb_CashToAdd or {}
	if self.rotgb_BankBonus then
		if not lagless then
			for k,v in pairs(ents.GetAll()) do
				if (v.Base == "gballoon_tower_base" and IsValid(v:GetTowerOwner())) then
					local towerowner = v:GetTowerOwner()
					self.rotgb_CashToAdd[towerowner] = (self.rotgb_CashToAdd[towerowner] or 0) + (v.SellAmount or 0)
				end
			end
		end
		for k,v in pairs(player.GetAll()) do
			self:AddCash(math.min(self.rotgb_BankMax, (ROTGB_GetCash(v) + (self.rotgb_CashToAdd[v] or 0)) * self.rotgb_BankFactor * cmul), v)
		end
	else
		for k,v in pairs(player.GetAll()) do
			self:AddCash(math.min(self.rotgb_BankMax,ROTGB_GetCash(v)*self.rotgb_BankFactor*cmul),v)
		end
	end
end

function ENT:ROTGB_AcceptInput(input,activator,caller,data)
	if input:lower()=="gainendcash" then
		local buff = self.rotgb_Buff
		self:AddCash(self.rotgb_HoverballWorth*(self.rotgb_10Chance and 1.9 or 1)/self.rotgb_HoverballDelay*self.rotgb_HoverballPostCash
		*(self.rotgb_Trading and math.random()*4 or 1)*GetConVar("rotgb_cash_mul"):GetFloat(), self:GetTowerOwner())
		if self.rotgb_BankFactor > 0 and self.rotgb_NoHoverball then
			self:PerformBank()
			for i=1,59 do
				self:PerformBank(true)
			end
		end
		if buff > 0 then
			if buff > 1 then
				self.rotgb_HoverballWorth = self.rotgb_HoverballWorth * 1.2
			end
			for k,v in pairs(ents.FindByClass("gballoon_target")) do
				v:SetHealth(math.min(v:Health()+(self.rotgb_AutoHoverball and 40 or 20), 999999999))
				if buff > 2 then
					v:SetHealth(math.min(v:Health()*(self.rotgb_AutoHoverball and 1.4 or 1.2), 999999999))
				end
			end
		end
	end
end

function ENT:TriggerAbility()
	for k,v in pairs(player.GetAll()) do
		self:AddCash(ROTGB_GetCash(v)*GetConVar("rotgb_cash_mul"):GetFloat(),v)
	end
end